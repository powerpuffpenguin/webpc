syntax = "proto3";

package jsgenerate_webpc.forward.fs;
option go_package = "github.com/powerpuffpenguin/webpc/protocol/forward/fs";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";

service FS {
    // Get Mount list
    rpc Mount (MountRequest) returns (MountResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/mount"
        };
    }
    // Get Shared Mount list
    rpc Shared (SharedRequest) returns (SharedResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/shared"
        };
    }
    // list file info
    rpc List (ListRequest) returns (ListResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/list"
        };
    }
    // Download log file
    rpc Download (DownloadRequest) returns (stream google.api.HttpBody){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/download"
        };
    }
    // Update file data
    // put /api/forward/v1/fs/put/:id/:root/*path
    rpc Put (stream PutRequest) returns (PutResponse){}

    // Create a new folder or file
    rpc Create (CreateRequest) returns (FileInfo){
        option (google.api.http) = {
            post: "/api/forward/v1/fs"
            body: "*"
        };
    }
    // Remove folder or file
    rpc Remove (RemoveRequest) returns (RemoveResponse){
        option (google.api.http) = {
            delete: "/api/forward/v1/fs"
        };
    }
    rpc Rename (RenameRequest) returns (RenameResponse){
        option (google.api.http) = {
            post: "/api/forward/v1/fs/rename"
            body: "*"
        };
    }
    // websocket /api/forward/v1/fs/:id/compress
    rpc Compress (stream CompressRequest) returns (stream CompressResponse){}
    // websocket /api/forward/v1/fs/:id/uncompress
    rpc Uncompress (stream UncompressRequest) returns (stream UncompressResponse){}
    // websocket /api/forward/v1/fs/:id/copy
    rpc Copy (stream CopyRequest) returns (stream CopyResponse){}
    // Get upload file hash
    rpc Hash (HashRequest) returns (HashResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/hash"
        };
    }
    // Get upload chunk hash
    rpc Chunk (ChunkRequest) returns (ChunkResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/chunk"
        };
    }
    // upload chunk
    // post /api/forward/v1/fs/upload/:id/:root/:chunk/*path
    rpc Upload (UploadRequest) returns (UploadResponse){}

    // merge chunk to file
    rpc Merge (MergeRequest) returns (MergeResponse){
        option (google.api.http) = {
            post: "/api/forward/v1/fs/merge"
            body: "*"
        };
    }

    // http filesystem for shared
    rpc Open (stream OpenRequest) returns (stream OpenResponse);
    // http filesystem for readable
    rpc OpenRead (stream OpenRequest) returns (stream OpenResponse);
}
message MountRequest{
}
message MountResponse{
    repeated string name = 1;
}
message SharedRequest{
}
message SharedResponse{
    repeated string name = 1;
}
message Dir{
    string root = 1;
    bool read = 2;
    bool write = 3;
    bool shared = 4;
    string dir = 5;
}
message FileInfo{
    string name = 1;
    uint32 mode = 2;
    int64 size = 3;
    bool isDir = 4;
}
message ListRequest{
    string root = 1;
    string path = 2;
}
message ListResponse{
    Dir dir = 1;
    repeated FileInfo items = 2;
}
message DownloadRequest{
    string root = 1;
    string path =2;
}
message PutRequest{
    string root = 1;
    string path =2;
    bytes data = 3;
}
message PutResponse{
}
message CreateRequest{
    string root = 1;
    string dir =2;
    string name =3;
    // if true create a new file, else create a new folder
    bool file = 4;
}
message RemoveRequest{
    string root = 1;
    string dir = 2;
    repeated string names = 3;
}
message RemoveResponse{
}
message RenameRequest{
    string root = 1;
    string dir = 2;
    string old = 3;
    string current = 4;
}
message RenameResponse{
}
enum Event {
    EventUniversal = 0;
    Heart = 1;

    Init = 2;
    Progress = 3;
    Success = 4;
    
    Yes = 5;
    No = 6;

    Exists = 7;
    YesAll = 8;
    Skip = 9;
    SkipAll = 10;
};
enum Algorithm {
    AlgorithmUniversal = 0;
    Tar = 1;
    Zip = 2;
    TarGZ = 3;
};
message CompressRequest{
    Event event = 1;

    // init
    string root = 2;
    string dir = 3;
    string dst = 4;
    repeated string source = 5;
    Algorithm algorithm = 6;
}
message CompressResponse{
    Event event = 1;
    string value = 2;
    FileInfo info = 3;
}
message UncompressRequest{
    Event event = 1;

    // init
    string root = 2;
    string dir = 3;
    string name = 4;
}
message UncompressResponse{
    Event event = 1;
    string value = 2;
}
message CopyRequest{
    Event event = 1;

    // init
    string srcRoot = 2;
    string srcDir = 3;
    string dstRoot = 4;
    string dstDir = 5;
    repeated string names = 6;
    bool copied = 7;
}
message CopyResponse{
    Event event = 1;
    string value = 2;
}
message HashRequest{
    string root = 1;
    string path = 2;
    // file size
    int64 size = 3;
    // chunk size
    uint32 chunk = 4;
}
message HashResponse{
    bool exists = 1;
    // crc32(chunks.map((chunk)=>crc32(chunk)).join())
    string hash = 2; // if size not match,set hash empty string
}
message ChunkRequest{
    string root = 1;
    string path = 2;
    // chunk index offset
    uint32 chunk = 3;
    // chunk count
    uint32 count = 4;
} 
message ChunkResponse{
    // crc32(chunk)
    repeated string result = 1;
}
message UploadRequest{
    string root = 1;
    string path =2;
    uint32 chunk = 3;
    bytes data = 4;
}
message UploadResponse{
}
message MergeRequest{
    string root = 1;
    string path =2;
    string hash = 3;
    uint32 count = 4;
}
message MergeResponse{
}
message FSInfo{
    string name = 1;       // base name of the file
	int64 size = 2;         // length in bytes for regular files; system-dependent for others
	uint32 mode = 3;      // file mode bits
	int64 modTime = 4; // modification time
	bool isDir = 5;        // abbrev
}
enum FSEvent {
    FSEventUniversal = 0;
    Open = 1;
    Close = 2;
    Read = 3;
    Seek = 4;
    Readdir = 5;
    Stat= 6;
};
message OpenRequest{
    FSEvent event = 1;
    // open
    string root = 2;
    string path = 3;

    // read buffer
    uint32 read = 4;

    // seek
    int64 offset = 5;
    int32 whence = 6;

    // readdir
    int32 readdir = 7;
}
message OpenResponse{
    FSEvent event = 1;

    // read
    bytes read = 2;
    bool eof = 3;

    // seek
    int64 seek = 4;

    // readdir
    repeated FSInfo readdir = 5;

    FSInfo stat = 6;
}