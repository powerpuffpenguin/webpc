syntax = "proto3";

package jsgenerate_webpc.forward.fs;
option go_package = "github.com/powerpuffpenguin/webpc/protocol/forward/fs";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";

service FS {
    // Get Mount list
    rpc Mount (MountRequest) returns (MountResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/mount"
        };
    }
    // list file info
    rpc List (ListRequest) returns (ListResponse){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/list"
        };
    }
    // Download log file
    rpc Download (DownloadRequest) returns (stream google.api.HttpBody){
        option (google.api.http) = {
            get: "/api/forward/v1/fs/download"
        };
    }
    // Update file data
    // put /api/forward/v1/fs
    rpc Put (stream PutRequest) returns (PutResponse){}

    // Create a new folder or file
    rpc Create (CreateRequest) returns (FileInfo){
        option (google.api.http) = {
            post: "/api/forward/v1/fs"
            body: "*"
        };
    }
    // Remove folder or file
    rpc Remove (RemoveRequest) returns (RemoveResponse){
        option (google.api.http) = {
            delete: "/api/forward/v1/fs"
        };
    }
    rpc Rename (RenameRequest) returns (RenameResponse){
        option (google.api.http) = {
            post: "/api/forward/v1/fs/rename"
            body: "*"
        };
    }
    rpc Compress (stream CompressRequest) returns (stream CompressResponse){}
}
message MountRequest{
}
message MountResponse{
    repeated string name = 1;
}
message Dir{
    string root = 1;
    bool read = 2;
    bool write = 3;
    bool shared = 4;
    string dir = 5;
}
message FileInfo{
    string name = 1;
    uint32 mode = 2;
    int64 size = 3;
    bool isDir = 4;
}
message ListRequest{
    string root = 1;
    string path = 2;
}
message ListResponse{
    Dir dir = 1;
    repeated FileInfo items = 2;
}
message DownloadRequest{
    string root = 1;
    string path =2;
}
message PutRequest{
    string root = 1;
    string path =2;
    bytes data = 3;
}
message PutResponse{
}
message CreateRequest{
    string root = 1;
    string dir =2;
    string name =3;
    // if true create a new file, else create a new folder
    bool file = 4;
}
message RemoveRequest{
    string root = 1;
    string dir = 2;
    repeated string names = 3;
}
message RemoveResponse{
}
message RenameRequest{
    string root = 1;
    string dir = 2;
    string old = 3;
    string current = 4;
}
message RenameResponse{
}
enum Event {
    EventUniversal = 0;
    Heart = 1;
    Init = 2;
    Exists = 3;
    Progress = 4;
    Success = 5;
};
enum Algorithm {
    AlgorithmUniversal = 0;
    Tar = 1;
    Zip = 2;
    TarGZ = 3;
};
message CompressRequest{
    Event event = 1;

    // init
    string root = 2;
    string dir = 3;
    string dst = 4;
    repeated string source = 5;
    // .tar
    // .zip
    // .tar.gz
    Algorithm algorithm = 6;
}
message CompressResponse{
    Event event = 1;
    string value = 2;
    FileInfo info = 3;
}